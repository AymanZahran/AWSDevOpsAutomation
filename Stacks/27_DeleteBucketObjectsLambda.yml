Parameters:
  FunctionName:
    Description: Delete Bucket Objects Lambda Function Name
    Type: String
    Default: "DeleteBucketObjectsLambda"
  StacksBucketName:
    Description: Bucket Name for the Cloudformation Stacks
    Type: String
  CloudTrailBucketName:
    Description: Bucket Name for the CloudTrail
    Type: String
  ArtifactsBucketName:
    Description: Bucket Name for Artifacts Stages Transitions
    Type: String
  ECRRepoName:
    Description: ECR Repo Name
    Type: String

Resources:
  DeleteStacksBucketObjects:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt DeleteBucketObjectsLambda.Arn
      bucket_name: !Ref StacksBucketName
  DeleteCloudTrailBucketObjects:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt DeleteBucketObjectsLambda.Arn
      bucket_name: !Ref CloudTrailBucketName
  DeleteArtifactsBucketObjects:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt DeleteBucketObjectsLambda.Arn
      bucket_name: !Ref ArtifactsBucketName
      ecr_name: !Ref ECRRepoName

  DeleteBucketObjectsLambda:
     Type: AWS::Lambda::Function
     Properties:
       Description: "Delete all Object in S3 Bucket"
       FunctionName: !Ref FunctionName
       Handler: index.handler
       Role: !ImportValue DeleteBucketObjectsLambdaRole
       Timeout: 360
       Runtime: python3.8
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          ### cfnresponse module help in sending responses to CloudFormation
          ### instead of writing your own code

          def handler(event, context):
              # Get request type
              the_event = event['RequestType']        
              print("The event is: ", str(the_event))

              response_data = {}
              s3 = boto3.client('s3')

              # Retrieve parameters (bucket name)
              bucket_name = event['ResourceProperties']['bucket_name']
              ecr_name = event['ResourceProperties']['ecr_name']

              try:
                  if the_event == 'Delete':
                      s3_Resource = boto3.resource('s3')
                      s3_Client = boto3.client('s3')
                      print("Deleting", str(bucket_name), "content...")
                      s3_Resource.Bucket(str(bucket_name)).objects.all().delete()
                      print("Deleting", str(bucket_name), "bucket...")
                      s3_Client.delete_bucket(Bucket=str(bucket_name))
                      client = boto3.client('ecr')
                      print("Deleting", str(ecr_name), "repo...")
                      client.delete_repository(repositoryName=ecr_name, force=True)

                  # Everything OK... send the signal back
                  print("Execution succesfull!")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print("Execution failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)